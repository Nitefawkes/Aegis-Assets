name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run integration tests
      run: cargo test --verbose --test integration

    - name: Test CLI
      run: |
        cargo build --bin aegis
        ./target/debug/aegis --version
        ./target/debug/aegis info

  compliance-check:
    name: Compliance Verification
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Verify compliance profiles
      run: |
        # Validate YAML syntax in compliance profiles
        for file in compliance-profiles/*.yaml; do
          python3 -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
        done

    - name: Check for high-risk publisher support
      run: |
        # Ensure no official support for high-risk publishers
        if grep -r "nintendo.*supported" compliance-profiles/ --ignore-case; then
          echo "Error: Found official Nintendo support - violates compliance policy"
          exit 1
        fi

    - name: Validate plugin compliance
      run: |
        cargo build --features all-plugins
        # Add compliance validation tests here

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo-deny
      run: |
        cargo install cargo-deny
        cargo deny check

  build:
    name: Build Release
    needs: [test, compliance-check, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: aegis-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: aegis-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: aegis-macos-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --bin aegis --target ${{ matrix.target }}

    - name: Create artifact directory
      run: mkdir -p artifacts

    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/aegis artifacts/${{ matrix.artifact_name }}
        chmod +x artifacts/${{ matrix.artifact_name }}

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\aegis.exe artifacts\${{ matrix.artifact_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/${{ matrix.artifact_name }}

  python-bindings:
    name: Build Python Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install maturin
      run: pip install maturin

    - name: Build Python wheel
      working-directory: aegis-python
      run: maturin build --release

    - name: Install and test wheel
      working-directory: aegis-python
      run: |
        pip install target/wheels/*.whl
        python -c "import aegis_assets; print(aegis_assets.get_version())"

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: python-wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: aegis-python/target/wheels/*.whl

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build documentation
      run: cargo doc --all-features --no-deps

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  release:
    name: Create Release
    if: github.event_name == 'release'
    needs: [build, python-bindings]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Compress binary artifacts
        for dir in aegis-*-x64*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            tar -czf "../release-assets/${dir}.tar.gz" *
            cd ..
          fi
        done
        
        # Collect Python wheels
        find python-wheels-* -name "*.whl" -exec cp {} release-assets/ \;

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, compliance-check]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/aegis-assets:latest
          ghcr.io/${{ github.repository_owner }}/aegis-assets:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, compliance-check, security, build]
    if: always()
    
    steps:
    - name: Notify Discord
      if: github.ref == 'refs/heads/main'
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "Aegis-Assets CI/CD Status"
        description: "Build and test pipeline completed"
        color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}
